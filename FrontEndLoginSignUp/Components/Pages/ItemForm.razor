@using System.ComponentModel.DataAnnotations
@using ClassLibraryModel
@using ClassLibraryModel.ClassLibraryModel
@inject IHttpClientFactory HttpClientFactory
@inject UserService UserService
@rendermode InteractiveServer

<div class="card mt-4">
    <div class="card-body">
        <h4 class="card-title">Add Menu Item</h4>
        <EditForm Model="currentMenu" OnValidSubmit="HandleSaveClick">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="item">Item Name</label>
                <InputText id="item" class="form-control" @bind-Value="currentMenu.Item" />
            </div>

            <div class="form-group">
                <label for="quantity">Quantity</label>
                <InputText id="quantity" class="form-control" @bind-Value="currentMenu.Quantity" />
            </div>

            <div class="form-group">
                <label for="serving">Serving</label>
                <InputText id="serving" class="form-control" @bind-Value="currentMenu.Serving" />
            </div>

            <div class="form-group">
                <label for="price">Price</label>
                <InputText id="price" class="form-control" @bind-Value="currentMenu.Price" />
            </div>

           


            <div class="form-group">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public MenuModel currentMenu { get; set; }
    [Parameter] public EventCallback<MenuModel> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
 

    public List<CategoryModel> Categories = new List<CategoryModel>();
    public string Email;
    private string? errorMessage;

    protected override async void OnInitialized()
    {
        Email = UserService.Username;
     
        StateHasChanged();
        base.OnInitialized();
    }

    private async Task HandleSaveClick()
    {
        try
        {
            errorMessage = null; // Clear any previous error messages
            if (string.IsNullOrEmpty(currentMenu.Menu_ID))
            {
                // Generate new Menu_ID if not set
                Guid Id = Guid.NewGuid();

                currentMenu.Menu_ID = Id.ToString();
             
            }

            var client = HttpClientFactory.CreateClient("AuthApi");

       
           
               var response = await client.PostAsJsonAsync("api/Menu", currentMenu);
            

            if (response.IsSuccessStatusCode)
            {
                await OnSave.InvokeAsync(currentMenu);
            }
            else
            {
                errorMessage = await GetErrorMessageAsync(response);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void Cancel()
    {
        OnCancel.InvokeAsync();
    }

    
    private async Task<string> GetErrorMessageAsync(HttpResponseMessage response)
    {
        var errorContent = await response.Content.ReadAsStringAsync();
        return !string.IsNullOrEmpty(errorContent) ? errorContent : response.ReasonPhrase;
    }
}
