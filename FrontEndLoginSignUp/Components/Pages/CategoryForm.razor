@using System.ComponentModel.DataAnnotations
@using ClassLibraryModel
@inject IHttpClientFactory HttpClientFactory
@inject UserService UserService
@rendermode InteractiveServer

<div class="card mt-4">
    <div class="card-body">
        <h4 class="card-title">Add Category</h4>
        <EditForm Model="currentCategory" OnValidSubmit="HandleSaveClick">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="title">Category Title</label>
                <InputText id="title" class="form-control" @bind-Value="currentCategory.Title" />
            </div>

           

           

            <div class="form-group">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public CategoryModel currentCategory { get; set; }
    [Parameter] public EventCallback<CategoryModel> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    public List<BranchModel> Branches = new List<BranchModel>();
    public string Email;
    private string? errorMessage;

    protected override async void OnInitialized()
    {
        Email = UserService.Username;
       
        StateHasChanged();
        base.OnInitialized();
    }

    private async Task HandleSaveClick()
    {
        try
        {
            errorMessage = null; // Clear any previous error messages
            Guid Id = Guid.NewGuid();
            currentCategory.Cat_ID = Id.ToString(); // Generate new Cat_ID

            var client = HttpClientFactory.CreateClient("AuthApi");

            // Call the API to insert the new category
            var response = await client.PostAsJsonAsync("api/Category", currentCategory);
            if (response.IsSuccessStatusCode)
            {
                await OnSave.InvokeAsync(currentCategory);
            }
            else
            {
                errorMessage = await GetErrorMessageAsync(response);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void Cancel()
    {
        OnCancel.InvokeAsync();
    }


    private async Task<string> GetErrorMessageAsync(HttpResponseMessage response)
    {
        var errorContent = await response.Content.ReadAsStringAsync();
        return !string.IsNullOrEmpty(errorContent) ? errorContent : response.ReasonPhrase;
    }
}
