@using System.ComponentModel.DataAnnotations
@using ClassLibraryModel
@using ClassLibraryModel.ClassLibraryModel
@inject IHttpClientFactory HttpClientFactory
@inject UserService UserService
@rendermode InteractiveServer

<div class="card mt-4">
    <div class="card-body">
        <h4 class="card-title">Add Nutrition</h4>
        <EditForm Model="currentNutrition" OnValidSubmit="HandleSaveClick">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Error Message Display -->
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                    <div class="alert alert-danger">@errorMessage</div>
            }

            <div class="form-group">
                <label for="nid">Nutrition ID</label>
                <InputText id="nid" class="form-control" @bind-Value="currentNutrition.NID"  disabled/>
            </div>

            <div class="form-group">
                <label for="title">Title</label>
                <InputText id="title" class="form-control" @bind-Value="currentNutrition.Title" />
            </div>

            <div class="form-group">
                <label for="amount">Amount</label>
                <InputText id="amount" class="form-control" @bind-Value="currentNutrition.Ammount" />
            </div>

            <div class="form-group">
                <label for="menuId">Menu ID</label>
                <InputText id="menuId" class="form-control" @bind-Value="currentNutrition.Menu_ID" />
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public NutritionModel currentNutrition { get; set; }
    [Parameter] public EventCallback<NutritionModel> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private string? errorMessage;

    private async Task HandleSaveClick()
    {
        try
        {
            errorMessage = null; // Clear any previous error messages
            if (string.IsNullOrEmpty(currentNutrition.NID))
            {
                Guid Id = Guid.NewGuid();
                currentNutrition.NID = Id.ToString();
            }

            var client = HttpClientFactory.CreateClient("AuthApi");
            var response = await client.PostAsJsonAsync("api/Nutrition", currentNutrition);

            if (response.IsSuccessStatusCode)
            {
                await OnSave.InvokeAsync(currentNutrition);
            }
            else
            {
                errorMessage = await GetErrorMessageAsync(response);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void Cancel()
    {
        OnCancel.InvokeAsync();
    }

    private async Task<string> GetErrorMessageAsync(HttpResponseMessage response)
    {
        var errorContent = await response.Content.ReadAsStringAsync();
        return !string.IsNullOrEmpty(errorContent) ? errorContent : response.ReasonPhrase;
    }
}
